#!/usr/local/bin/tclsh

#
# Script to query an LDAP directory
#
# usage : qldap [-h][-f <file>][-m x][-v] <name>
#    -h : help
#    -f : use a configuration file different from ~/.qldaprc
#    -m : "x" mode (example : "mutt" mode for use with the mail program mutt)
#    -v : be verbose
#
# Configuration file example
#	#
#	# ~/.qldaprc example
#	#
#
#	# LDAP directory access
#	url	ldaps://ldap.unistra.fr
#	base	o=uds
#
#	# Authentication : login (binddn) and password
#	binddn	uid=myself,o=mycomp
#	passwd	iwillnotgiveyoumypassword
#
#	# Lookup filter: %1$s is substitued by the lookup string
#	filter	(|(sn=*%1$s*)(mail=%1$s*))
#
#	# "normal" mode: name givenname mail department phone
#	fmt		%sn$-15.15s %givenName$-10.10s %mail$-30.30s %telephoneNumber$-10.10s
#	sort		sn givenName
#
#	# "mutt" mode: mail <tab> cn <tab> dept phone
#	# Be careful about tabs: you can't use \t, so use a real tab
#	fmt.mutt	%mail$s	%sn$s %givenName$s	%telephoneNumber$s
#
# History
#   2009/02/01 : pda : configuration file
#   2009/02/02 : pda : generalization for any LDAP directory
#   2009/02/17 : pda : generalization: modes and sort order
#   2009/02/18 : pda : verbose
#

# Needs Tcllib (>= 1.10)
package require ldapx

#
# Default values
#

set conf(url)		{ldap://ldap}
set conf(base)		{o=org}
set conf(binddn)	{}
set conf(passwd)	{}
# %1s = name to search
set conf(filter)	{(sn=*%1$s*)}

# modes
set conf(fmt)		{%sn$-15.15s %givenName$-10.10s %mail$-30.30s %telephoneNumber$-10.10s}
set conf(sort)		{sn givenName}
set conf(verbose)	no

set conf(fmt.mutt)	{%mail$s\t%sn$s %givenName$s\t%telephoneNumber$s}
set conf(verbose.mutt)	yes

###############################################################################
# Read configuration file, where lines should have syntax:
#	key value
# and stores informations in the conf() array where
# conf(key)=value or conf(key.mode)=value
#
# Only keys already in the array may be modified.
#

proc read-conf {_conf file} {
    upvar $_conf conf

    if {[file exists $file]} then {
	if {[catch {set fd [open $file "r"]} msg] == 0} then {
	    while {[gets $fd line] >= 0} {
		regsub {#.*} $line {} line
		set line [string trim $line]
		if {[string length $line] > 0} then {
		    parse-line conf $file $line
		}
	    }
	    close $fd
	} else {
	    puts stderr "Cannot open '$file' : $msg"
	}
    }
}

proc parse-line {_conf file line} {
    upvar $_conf conf

    if {[regexp {^([a-z]+)(\.\S+)?\s+(.*\S)\s*$} $line bidon k m v]} then {
	if {[lsearch -exact [array names conf] $k] != -1} then {
	    if {$v eq ".normal"} then {
		set v ""
	    }
	    set conf($k$m) $v
	} else {
	    puts stderr "$file: unknown keyword '$k'"
	}
    } else {
	puts stderr "$file: unrecongnized line '$line'"
    }
}

proc get-conf {_conf kw mode} {
    upvar $_conf conf

    if {$mode eq "normal" || $mode eq ""} then {
	set kwlist [list $kw]
    } else {
	set kwlist [list "$kw.$mode" "$kw"]
    }

    set v ""
    foreach k $kwlist {
	if {[info exists conf($k)]} then {
	    set v $conf($k)
	    break
	}
    }

    return $v
}

###############################################################################
# LDAP connection (via LDAP url ldap:// or ldaps://) with
# optional login/password
#

proc connect {url binddn passwd} {
    set fd [::ldapx::ldap create %AUTO%]
    if {[string equal $binddn ""] && [string equal $passwd ""]} then {
	if {! [$fd connect $url]} then {
	    puts stderr "Connection error: [$fd error]"
	    exit 1
	}
    } else {
	if {! [$fd connect $url $binddn $passwd]} then {
	    puts stderr "Connection error: [$fd error]"
	    exit 1
	}
    }
    return $fd
}

###############################################################################
# LDAP disconnection
#

proc disconnect {fd} {
    $fd disconnect
    $fd destroy
}

###############################################################################
# Directory lookup
# fd : access to LDAP directory (cf ldapx(n))
# outfd : output file
# _conf : configuration array
# string : lookupup string
# mode : mode, or "" for default mode
# verbose : 1/on or 0/off
#

proc lookup {fd outfd _conf string mode verbose} {
    upvar $_conf conf

    if {$verbose} then {
    	puts -nonewline $outfd "Searching database... "
    }

    #
    # Look for attributes in the format string and in the
    # sort criteria.
    #

    set lattr {}

    # Search attributes in format string

    set fmt [get-conf conf "fmt" $mode]
    if {$fmt eq ""} then {
	puts stderr "Invalid mode '$mode'"
	return 1
    }

    set f $fmt
    set p 0
    while {[regexp -start $p -indices {%([a-zA-Z0-9]+)\$} $f bidon lidx]} {
	lassign $lidx debut fin
	lappend lattr [string range $f $debut $fin]
	set p $fin
    }

    # Search attributes in sort order

    set sort [get-conf conf "sort" $mode]
    foreach t $sort {
	lappend lattr $t
    }

    # Make the list of attributes, and adapt format string to
    # use positionnal parameters (%1$s...)

    set lattr [lsort -unique -nocase $lattr]

    set i 1
    foreach a $lattr {
	regsub -all -nocase "%$a\\$" $fmt "%$i\$" fmt
	incr i
    }

    #
    # Prepare lookup
    #

    set e [::ldapx::entry create %AUTO%]

    set filtre [format [get-conf conf "filter" $mode] $string]

    set lfound {}

    $fd traverse $conf(base) $filtre $lattr $e {
	#
	# Build command:
	#    format <fmt> <attr1> ... <attrn>
	# and evaluate it
	#

	set dispcmd [list "format" $fmt]

	foreach a $lattr {
	    set v [$e get1 $a]
	    if {[string equal $a "mail"] && [string equal $v ""]} then {
		set v "...no.address.found"
	    }
	    if {[string equal $a "telephoneNumber"]} then {
		regsub -all " " $v "" v
	    }
	    lappend dispcmd $v
	}

	set affichage [eval $dispcmd]

	#
	# Build result list with n sort criteria, and text to display
	#

	set l {}
	foreach t $sort {
	    lappend l [$e get1 $t]
	}
	lappend l $affichage
	lappend lfound $l
    }

    set nfound [llength $lfound]

    if {$nfound == 0} then {
	puts $outfd "no match!"
	return 1
    }

    if {$verbose} then {
	puts $outfd "$nfound entries found"
    }

    #
    # Sort result
    #

    set l {}
    set i 0
    foreach t $sort {
	lappend $l $i
	incr i
    }
    set lfound [lsort -index $l -nocase $lfound]

    #
    # Output result
    #

    foreach l [lsort $lfound] {
	puts $outfd [lindex $l $i]
    }

    return 0
}

###############################################################################
# Main procedure

set usage {usage: %s [-h][-f <file>][-m x][-v] <name>
    -h : help (this text)
    -f : use a configuration file different from ~/.qldaprc
    -m : "x" mode (example : "mutt" mode for use with the mail program mutt)
    -v : be verbose
}

proc usage {argv0} {
    global usage

    puts stderr [format $usage $argv0]
}

proc main {argv0 argv} {
    global conf
    global env

    #
    # Default values
    #

    set mode ""

    set qldaprc $env(HOME)
    append qldaprc [file separator]
    append qldaprc .qldaprc

    #
    # Argument analysis
    #

    while {[llength $argv] > 0} {
	switch -glob -- [lindex $argv 0] {
	    -h {
		usage $argv0
		return 0
	    }
	    -f {
		set qldaprc [lindex $argv 1]
		set argv [lreplace $argv 0 1]
	    }
	    -m {
		set mode [lindex $argv 1]
		set argv [lreplace $argv 0 1]
	    }
	    -v {
		set verbose 1
		set argv [lreplace $argv 0 0]
	    }
	    -* {
		usage $argv0
		return 1
	    }
	    default {
		break
	    }
	}
    }

    if {[llength $argv] != 1} then {
	usage $argv0
	return 1
    }

    #
    # Do the work
    #

    read-conf conf $qldaprc

    set url    [get-conf conf "url" $mode]
    set binddn [get-conf conf "binddn" $mode]
    set passwd [get-conf conf "passwd" $mode]

    if {! [info exists verbose]} then {
	set verbose [get-conf conf "verbose" $mode]
    }

    set fd [connect $url $binddn $passwd]
    set code [lookup $fd stdout conf [lindex $argv 0] $mode $verbose]
    disconnect $fd

    return $code
}

exit [main $argv0 $argv]
